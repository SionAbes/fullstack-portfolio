/* tslint:disable */
/* eslint-disable */
/**
 * Fullstack Portfolio API
 * FastAPI of Fullstack Portfolio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Credentials,
    CredentialsFromJSON,
    CredentialsToJSON,
    GenericError,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    LoginResponse,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
} from '../models';

export interface LoginRequest {
    credentials: Credentials;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary login a user with credentials
     * @param {Credentials} credentials credentials to login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoginResponse>>;

    /**
     * login a user with credentials
     */
    login(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<LoginResponse>;

    /**
     * 
     * @summary refresh an access token, to extend its lifetime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    refreshRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Token>>;

    /**
     * refresh an access token, to extend its lifetime
     */
    refresh(initOverrides?: RequestInit): Promise<Token>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * login a user with credentials
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.credentials === null || requestParameters.credentials === undefined) {
            throw new runtime.RequiredError('credentials','Required parameter requestParameters.credentials was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CredentialsToJSON(requestParameters.credentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * login a user with credentials
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * refresh an access token, to extend its lifetime
     */
    async refreshRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Token>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * refresh an access token, to extend its lifetime
     */
    async refresh(initOverrides?: RequestInit): Promise<Token> {
        const response = await this.refreshRaw(initOverrides);
        return await response.value();
    }

}
