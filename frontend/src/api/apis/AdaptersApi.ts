/* tslint:disable */
/* eslint-disable */
/**
 * Fullstack Portfolio API
 * FastAPI of Fullstack Portfolio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Adapter,
    AdapterFromJSON,
    AdapterToJSON,
    CreateAdapter,
    CreateAdapterFromJSON,
    CreateAdapterToJSON,
    GenericError,
    GenericErrorFromJSON,
    GenericErrorToJSON,
} from '../models';

export interface CreateAdapterRequest {
    createAdapter: CreateAdapter;
}

/**
 * AdaptersApi - interface
 * 
 * @export
 * @interface AdaptersApiInterface
 */
export interface AdaptersApiInterface {
    /**
     * 
     * @summary creates a new adapter instance
     * @param {CreateAdapter} createAdapter creates a new adapter instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdaptersApiInterface
     */
    createAdapterRaw(requestParameters: CreateAdapterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Adapter>>;

    /**
     * creates a new adapter instance
     */
    createAdapter(requestParameters: CreateAdapterRequest, initOverrides?: RequestInit): Promise<Adapter>;

    /**
     * 
     * @summary fetch adapter instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdaptersApiInterface
     */
    fetchAdaptersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Adapter>>>;

    /**
     * fetch adapter instances
     */
    fetchAdapters(initOverrides?: RequestInit): Promise<Array<Adapter>>;

}

/**
 * 
 */
export class AdaptersApi extends runtime.BaseAPI implements AdaptersApiInterface {

    /**
     * creates a new adapter instance
     */
    async createAdapterRaw(requestParameters: CreateAdapterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Adapter>> {
        if (requestParameters.createAdapter === null || requestParameters.createAdapter === undefined) {
            throw new runtime.RequiredError('createAdapter','Required parameter requestParameters.createAdapter was null or undefined when calling createAdapter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adapters/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAdapterToJSON(requestParameters.createAdapter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdapterFromJSON(jsonValue));
    }

    /**
     * creates a new adapter instance
     */
    async createAdapter(requestParameters: CreateAdapterRequest, initOverrides?: RequestInit): Promise<Adapter> {
        const response = await this.createAdapterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * fetch adapter instances
     */
    async fetchAdaptersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Adapter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/adapters/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdapterFromJSON));
    }

    /**
     * fetch adapter instances
     */
    async fetchAdapters(initOverrides?: RequestInit): Promise<Array<Adapter>> {
        const response = await this.fetchAdaptersRaw(initOverrides);
        return await response.value();
    }

}
