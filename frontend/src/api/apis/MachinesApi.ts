/* tslint:disable */
/* eslint-disable */
/**
 * Fullstack Portfolio API
 * FastAPI of Fullstack Portfolio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GenericError,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    Machine,
    MachineFromJSON,
    MachineToJSON,
} from '../models';

/**
 * MachinesApi - interface
 * 
 * @export
 * @interface MachinesApiInterface
 */
export interface MachinesApiInterface {
    /**
     * 
     * @summary fetches machines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MachinesApiInterface
     */
    fetchMachinesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Machine>>>;

    /**
     * fetches machines
     */
    fetchMachines(initOverrides?: RequestInit): Promise<Array<Machine>>;

}

/**
 * 
 */
export class MachinesApi extends runtime.BaseAPI implements MachinesApiInterface {

    /**
     * fetches machines
     */
    async fetchMachinesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Machine>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/machines/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MachineFromJSON));
    }

    /**
     * fetches machines
     */
    async fetchMachines(initOverrides?: RequestInit): Promise<Array<Machine>> {
        const response = await this.fetchMachinesRaw(initOverrides);
        return await response.value();
    }

}
