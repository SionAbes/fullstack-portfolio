/* tslint:disable */
/* eslint-disable */
/**
 * Fullstack Portfolio API
 * FastAPI of Fullstack Portfolio
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUser,
    CreateUserFromJSON,
    CreateUserToJSON,
    GenericError,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    UpdateUser,
    UpdateUserFromJSON,
    UpdateUserToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface CreateUserRequest {
    createUser: CreateUser;
}

export interface DeleteUserByIDRequest {
    id: number;
}

export interface UpdateUserByIDRequest {
    id: number;
    updateUser: UpdateUser;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * 
     * @summary creates a new user
     * @param {CreateUser} createUser creates a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>>;

    /**
     * creates a new user
     */
    createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<User>;

    /**
     * 
     * @summary deletes a users by its id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteUserByIDRaw(requestParameters: DeleteUserByIDRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     * deletes a users by its id
     */
    deleteUserByID(requestParameters: DeleteUserByIDRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 
     * @summary fetches users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    fetchUsersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>>;

    /**
     * fetches users
     */
    fetchUsers(initOverrides?: RequestInit): Promise<Array<User>>;

    /**
     * 
     * @summary updates a users information by its id
     * @param {number} id 
     * @param {UpdateUser} updateUser updates a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUserByIDRaw(requestParameters: UpdateUserByIDRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>>;

    /**
     * updates a users information by its id
     */
    updateUserByID(requestParameters: UpdateUserByIDRequest, initOverrides?: RequestInit): Promise<User>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * creates a new user
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.createUser === null || requestParameters.createUser === undefined) {
            throw new runtime.RequiredError('createUser','Required parameter requestParameters.createUser was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserToJSON(requestParameters.createUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * creates a new user
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletes a users by its id
     */
    async deleteUserByIDRaw(requestParameters: DeleteUserByIDRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletes a users by its id
     */
    async deleteUserByID(requestParameters: DeleteUserByIDRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteUserByIDRaw(requestParameters, initOverrides);
    }

    /**
     * fetches users
     */
    async fetchUsersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * fetches users
     */
    async fetchUsers(initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.fetchUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * updates a users information by its id
     */
    async updateUserByIDRaw(requestParameters: UpdateUserByIDRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserByID.');
        }

        if (requestParameters.updateUser === null || requestParameters.updateUser === undefined) {
            throw new runtime.RequiredError('updateUser','Required parameter requestParameters.updateUser was null or undefined when calling updateUserByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("userAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserToJSON(requestParameters.updateUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * updates a users information by its id
     */
    async updateUserByID(requestParameters: UpdateUserByIDRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.updateUserByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
